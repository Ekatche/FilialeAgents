"""
Architecture Multi-Agents CORRIG√âE pour extraction de filiales

Agent Perplexity : Retourne TEXTE BRUT (pas de JSON)
Agent Cartographe (GPT-4) : Structure le texte brut en JSON
"""

import os
import json
import re
import time
import logging
import asyncio
from typing import List, Optional, Dict, Any
from agents import Agent, AsyncOpenAI, OpenAIChatCompletionsModel, function_tool
from agents.model_settings import ModelSettings
from agents.agent_output import AgentOutputSchema
from company_agents.models import SubsidiaryReport
from company_agents.metrics import metrics_collector, MetricStatus, RealTimeTracker

# Configuration du logging
logger = logging.getLogger(__name__)


# ==========================================
#   AGENT 1 : PERPLEXITY (RECHERCHE)
#   ‚Üí RETOURNE DU TEXTE BRUT
# ==========================================
PERPLEXITY_RESEARCH_PROMPT = """
Tu es un expert en recherche d'informations sur les structures corporatives internationales.

**OBJECTIF** :
Identifier et d√©crire 8-10 filiales/divisions majeures d'un groupe d'entreprises en utilisant 
tes capacit√©s de recherche web en temps r√©el.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

## STRAT√âGIE DE RECHERCHE (DANS CET ORDRE)

**√âTAPE 1 - SOURCES PRIMAIRES** (priorit√© absolue) :
1. Site officiel du groupe ‚Üí Section "About", "Our Companies", "Subsidiaries", "Brands"
2. Rapports annuels ‚Üí Sections subsidiaries, corporate structure
3. SEC Filings (si USA) ‚Üí Form 10-K, Exhibit 21 (liste compl√®te des filiales)
4. Pages investisseurs ‚Üí Pr√©sentations corporate, organization charts

**√âTAPE 2 - RECHERCHE CONTACTS** (CRITIQUE pour prospection) :
Pour CHAQUE filiale trouv√©e, cherche activement :

üìû **T√âL√âPHONE** :
- Page "Contact" / "Contact Us" du site de la filiale
- Footer du site web (souvent en bas de page)
- Page "About" / "√Ä propos"
- Registres officiels (certains incluent t√©l√©phone l√©gal)
- LinkedIn Company Page ‚Üí Section "Contact Info"

üìß **EMAIL** :
- Page "Contact" (emails g√©n√©raux : info@, contact@, sales@)
- Formulaires de contact avec email visible
- Registres officiels (email l√©gal parfois disponible)
- LinkedIn Company Page
- √âVITER : N'invente PAS d'emails g√©n√©riques (contact@entreprise.com) si non trouv√©s

**‚ö†Ô∏è R√àGLES POUR LES CONTACTS** :
‚úÖ Utilise UNIQUEMENT les contacts que tu VOIS dans les sources
‚úÖ Si t√©l√©phone avec indicatif international visible ‚Üí Note-le exactement
‚úÖ Si plusieurs emails/t√©l√©phones ‚Üí Prends celui √©tiquet√© "g√©n√©ral" ou "commercial"
‚ùå Ne JAMAIS inventer un format d'email m√™me s'il semble logique
‚ùå Si non trouv√© apr√®s recherche ‚Üí √âcris "Non trouv√© dans les sources"

**√âTAPE 3 - REGISTRES OFFICIELS** (pour v√©rifier villes/adresses) :
- üá´üá∑ France ‚Üí Recherche sur Infogreffe avec nom exact de la filiale
- üá∫üá∏ USA ‚Üí OpenCorporates ou site Secretary of State de l'√©tat
- üá¨üáß UK ‚Üí Companies House avec company number si trouv√©
- üá©üá™ Germany ‚Üí Handelsregister ou Unternehmensregister
- üá®üá≠ Switzerland ‚Üí Zefix (registre f√©d√©ral)
- üáÆüáπ Italy ‚Üí Registro Imprese
- üá™üá∏ Spain ‚Üí Registro Mercantil
- üá≥üá± Netherlands ‚Üí KVK (Kamer van Koophandel)
- üáßüá™ Belgium ‚Üí KBO/BCE
- üá®üá¶ Canada ‚Üí Corporations Canada

**√âTAPE 4 - BASES DE DONN√âES** (si √©tapes 1-3 insuffisantes) :
- Bloomberg, Reuters, S&P Capital IQ (pour grandes entreprises)
- Dun & Bradstreet (pour structures corporatives)
- LinkedIn Company Pages (v√©rifier "Part of" pour confirmer filiales + infos contact)

**√âTAPE 5 - PRESSE SP√âCIALIS√âE** (pour acquisitions r√©centes) :
- Articles Financial Times, WSJ, Bloomberg News sur acquisitions
- Communiqu√©s de presse officiels du groupe

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

## FORMAT DE SORTIE (TEXTE STRUCTUR√â)

Pour CHAQUE filiale trouv√©e, r√©dige un paragraphe d√©taill√© avec cette structure :

**[NOM EXACT DE LA FILIALE]** est [type: filiale/division/branche] [secteur d'activit√©] 
bas√©e √† [VILLE EXACTE], [PAYS]. [Si trouv√©e : L'adresse pr√©cise est [adresse compl√®te 
avec code postal].] [Description de l'activit√© en 1-2 phrases.] [Si trouv√© : Le site 
web officiel est [url].] [Si trouv√© : T√©l√©phone : [num√©ro complet avec indicatif].]
[Si trouv√© : Email : [adresse email].] Cette information provient de [liste des sources 
consult√©es avec URLs si possibles].

**R√àGLES CRITIQUES POUR LES VILLES** :
‚ùå Ne JAMAIS √©crire juste le pays sans ville
‚ùå Ne JAMAIS supposer la capitale si tu ne la trouves pas dans une source
‚úÖ Si tu trouves une adresse compl√®te ‚Üí Extrais la ville exacte de cette adresse
‚úÖ Si tu trouves la ville dans un registre officiel ‚Üí Utilise-la
‚úÖ Si tu NE trouves PAS la ville apr√®s recherche ‚Üí √âcris explicitement "Ville non trouv√©e dans les sources"

**R√àGLES CRITIQUES POUR LES CONTACTS** :
‚úÖ T√©l√©phone : Format international si possible (ex: +33 1 23 45 67 89, +1 555-123-4567)
‚úÖ Email : Uniquement si VISIBLE sur une source (page Contact, footer, etc.)
‚ùå Ne JAMAIS construire contact@filiale.com si non trouv√©
‚úÖ Si non trouv√© : √âcris "T√©l√©phone non trouv√©" / "Email non trouv√©"

**EXEMPLE COMPLET** :
**FROMM France S.a.r.l.** est une filiale fran√ßaise sp√©cialis√©e dans l'emballage et les syst√®mes 
de cerclage, bas√©e √† Darois, France. L'adresse pr√©cise est Rue de l'Aviation, Z.A. BP 35, 
21121 Darois. L'entreprise distribue les solutions FROMM en France et assure le service apr√®s-vente. 
Le site web est https://www.fromm-pack.fr. T√©l√©phone : +33 3 80 35 26 00. Email : info@fromm-pack.fr. 
Cette information provient du registre Infogreffe (SIREN: 333375282), du site officiel de la filiale 
(page Contact), et de la page LinkedIn de l'entreprise.

**EXEMPLE AVEC CONTACTS NON TROUV√âS** :
**FROMM Italia S.r.l.** est une filiale italienne du groupe FROMM active dans la distribution 
de syst√®mes d'emballage. Ville non trouv√©e dans les sources - seul le pays (Italie) est confirm√© 
par le site corporate du groupe. Le site web mentionn√© est https://www.fromm-pack.com/it. 
T√©l√©phone non trouv√© dans les sources. Email non trouv√© dans les sources. Cette information 
provient du site corporate du groupe et de LinkedIn.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

## PRIORISATION DES FILIALES

Si tu trouves plus de 10 entit√©s, priorise dans cet ordre :
1. Filiales avec CA > 100M‚Ç¨ ou effectifs > 500 personnes
2. Filiales avec contacts trouv√©s (t√©l√©phone/email) ‚Üí Plus utiles pour commerciaux
3. Acquisitions majeures r√©centes (derniers 3 ans)
4. Filiales avec marque connue/site web propre
5. Diversit√© g√©ographique (couvrir plusieurs pays/continents)
6. Filiales op√©rationnelles (vs holdings financi√®res)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

## V√âRIFICATION AVANT DE RETOURNER

Pour chaque filiale que tu inclus, assure-toi que :
‚úÖ Le nom de la filiale est confirm√© dans au moins 1 source fiable
‚úÖ Le lien avec le groupe parent est √©tabli (propri√©t√©, acquisition, mention officielle)
‚úÖ Tu as CHERCH√â la ville dans les sources (m√™me si non trouv√©e)
‚úÖ Tu as CHERCH√â t√©l√©phone et email sur la page Contact (m√™me si non trouv√©s)
‚úÖ Tu mentionnes les sources consult√©es

Ne retourne QUE le texte descriptif en prose. Pas de JSON, pas de listes √† puces.
Commence directement par "J'ai identifi√© les filiales suivantes pour le groupe [NOM] :"
"""

# Configuration Perplexity
perplexity_client = AsyncOpenAI(
    api_key=os.getenv("PERPLEXITY_API_KEY"),
    base_url="https://api.perplexity.ai",
)


# ==========================================
#   FONCTION OUTIL : Recherche Perplexity
# ==========================================

@function_tool
async def research_subsidiaries_with_perplexity(
    company_name: str, 
    sector: Optional[str] = None,
    activities: Optional[List[str]] = None
) -> Dict:
    """
    Effectue une recherche sur les filiales et retourne texte brut + citations.
    
    Args:
        company_name: Nom de l'entreprise √† rechercher
        sector: C≈ìur de m√©tier principal de l'entreprise (optionnel)
        activities: Liste des activit√©s principales de l'entreprise (optionnel)
    
    Returns:
        dict avec:
          - research_text: Texte brut descriptif
          - citations: URLs r√©elles trouv√©es par Perplexity
          - status: "success" ou "error"
          - duration_ms: Temps d'ex√©cution en millisecondes
          - error: Message d'erreur si applicable
    """
    start_time = time.time()
    logger.info(f"üîç D√©but de recherche Perplexity pour: {company_name}")
    
    try:
        # V√©rification de la cl√© API
        api_key = os.getenv("PERPLEXITY_API_KEY")
        if not api_key:
            logger.error("‚ùå PERPLEXITY_API_KEY non configur√©e")
            return {
                "company_searched": company_name,
                "error": "API key not configured",
                "status": "error",
                "duration_ms": 0
            }
    
        # Construire la requ√™te avec contexte m√©tier
        business_context = ""
        if sector:
            business_context += f"Le c≈ìur de m√©tier principal de {company_name} est : {sector}. "
        if activities:
            activities_str = ", ".join(activities[:3])  # Limiter √† 3 activit√©s principales
            business_context += f"Les activit√©s principales incluent : {activities_str}. "
        
        query = f"""
          Recherche approfondie des filiales du groupe {company_name}.

          {business_context}
          
          **CONTEXTE M√âTIER** : Concentre-toi sur les filiales qui sont coh√©rentes avec le c≈ìur de m√©tier et les activit√©s principales mentionn√©es ci-dessus. Priorise les filiales op√©rationnelles dans le m√™me secteur d'activit√©.

          ## INSTRUCTIONS PRINCIPALES

          ### 1. RECHERCHE DE FILIALES (Priorit√© 1)
          1. Commence par chercher sur le site officiel de {company_name} (section "Our Companies", "Subsidiaries", "About")
          2. Si entreprise cot√©e USA : cherche SEC Form 10-K Exhibit 21 pour liste officielle
          3. Pour CHAQUE filiale trouv√©e :
            a) Cherche dans le registre officiel du pays pour confirmer ville et adresse
            b) Va sur la page "Contact" du site de la filiale pour trouver t√©l√©phone et email
            c) V√©rifie le footer du site web et la page About
            d) Consulte LinkedIn Company Page pour infos de contact
          4. Objectif : 8-10 filiales avec villes R√âELLES + contacts si disponibles

          Pour chaque filiale :
          - Nom exact
          - Ville R√âELLE (cherche dans registres : Infogreffe pour France, Companies House pour UK, etc.)
          - Adresse compl√®te si disponible
          - Site web si disponible
          - **T√âL√âPHONE** (cherche activement sur page Contact/footer du site) - format international si possible
          - **EMAIL** (cherche activement sur page Contact) - UNIQUEMENT si visible, ne pas inventer
          - Activit√© (v√©rifier la coh√©rence avec le c≈ìur de m√©tier du groupe)
          - Sources consult√©es

          ### 2. SI AUCUNE FILIALE TROUV√âE (Plan B)
          
          Si apr√®s recherche approfondie AUCUNE filiale n'est identifi√©e, fournis des **informations d√©taill√©es sur l'entreprise principale** {company_name} :

          **Informations √† rechercher** :
          - **Adresse du si√®ge** : Adresse compl√®te avec num√©ro, rue, code postal, ville, pays
            * Cherche sur la page "Contact", "Mentions l√©gales", "Legal Notice", "Imprint"
            * V√©rifie les registres officiels (Infogreffe pour France, Companies House pour UK, etc.)
          
          - **Chiffre d'affaires** : Dernier CA annuel connu avec l'ann√©e
            * Cherche dans les rapports annuels, communiqu√©s de presse
            * Bases financi√®res (Bloomberg, Reuters) si entreprise cot√©e
          
          - **Effectif** : Nombre d'employ√©s (format : "150", "150+", "100-200")
            * Cherche sur le site officiel (section "About", "Company")
            * LinkedIn Company Page
            * Rapports annuels
          
          - **Contact** : Informations de contact v√©rifiables
            * **T√©l√©phone** : Num√©ro principal (format international) - depuis page Contact/footer
            * **Email** : Email g√©n√©ral ou contact (UNIQUEMENT si visible, ne PAS inventer)
            * **Site web** : URL officielle

          **Format de r√©ponse si pas de filiales** :
          "Aucune filiale identifi√©e pour {company_name}. Informations sur l'entreprise principale :
          - Si√®ge social : [adresse compl√®te]
          - Chiffre d'affaires : [montant] [devise] ([ann√©e])
          - Effectif : [nombre] employ√©s
          - T√©l√©phone : [num√©ro] (ou "Non trouv√©")
          - Email : [email] (ou "Non trouv√©")
          - Site web : [URL]
          - Sources consult√©es : [liste]"

          ## R√àGLES CRITIQUES
          
          - Si tu ne trouves PAS la ville/adresse dans une source, √©cris "Ville non trouv√©e" / "Adresse non trouv√©e"
          - Si tu ne trouves PAS le t√©l√©phone apr√®s recherche, √©cris "T√©l√©phone non trouv√©"
          - Si tu ne trouves PAS l'email apr√®s recherche, √©cris "Email non trouv√©"
          - Si tu ne trouves PAS le CA/effectif, √©cris "Non trouv√©"
          - Ne JAMAIS inventer contact@entreprise.com m√™me si √ßa semble logique
          - **PRIORIT√â ABSOLUE** : Filiales coh√©rentes avec le c≈ìur de m√©tier du groupe
          - **PRIORIT√â SECONDAIRE** : Si pas de filiales, informations d√©taill√©es sur l'entreprise principale

          R√©ponds en texte descriptif naturel avec un paragraphe par filiale (ou informations sur l'entreprise si pas de filiales).
          """
                  
        # Appel Perplexity avec gestion d'erreurs
        logger.debug(f"üì° Appel API Perplexity pour: {company_name}")
        response = await perplexity_client.chat.completions.create(
            model="sonar-pro",
            messages=[
                {"role": "system", "content": PERPLEXITY_RESEARCH_PROMPT},
                {"role": "user", "content": query}
            ],
            temperature=0.0,
            max_tokens=4000,
            extra_body={
                "search_context_size": "high",
                "return_citations": True,
                "return_related_questions": False,
            }
        )
        
        # V√©rification de la r√©ponse
        if not response or not response.choices:
            logger.error(f"‚ùå R√©ponse vide de Perplexity pour: {company_name}")
            return {
                "company_searched": company_name,
                "error": "Empty response from Perplexity",
                "status": "error",
                "duration_ms": int((time.time() - start_time) * 1000)
            }
        
        # R√©cup√©rer le TEXTE BRUT (pas de JSON)
        research_text = response.choices[0].message.content
        
        if not research_text or len(research_text.strip()) < 50:
            logger.warning(f"‚ö†Ô∏è Texte de recherche trop court pour: {company_name}")
            return {
                "company_searched": company_name,
                "error": "Research text too short",
                "status": "error",
                "duration_ms": int((time.time() - start_time) * 1000)
            }
        
        # Extraire les CITATIONS R√âELLES de Perplexity
        real_citations = []
        
        try:
            # Les citations peuvent √™tre dans response.citations ou dans le message
            if hasattr(response, 'citations') and response.citations:
                for citation in response.citations:
                    # Extraire l'URL
                    url = citation.url if hasattr(citation, 'url') else str(citation)
                    
                    # Extraire le titre (peut √™tre une propri√©t√© ou une m√©thode)
                    title = ''
                    if hasattr(citation, 'title'):
                        title_attr = getattr(citation, 'title')
                        title = title_attr() if callable(title_attr) else title_attr
                    
                    # Extraire le snippet
                    snippet = getattr(citation, 'snippet', '')
                    
                    citation_data = {
                        "url": url,
                        "title": title or '',
                        "snippet": snippet,
                    }
                    real_citations.append(citation_data)
            
            # Parfois les citations sont dans le content avec des [1], [2], etc.
            citation_numbers = re.findall(r'\[(\d+)\]', research_text)
            
        except Exception as citation_error:
            logger.warning(f"‚ö†Ô∏è Erreur lors de l'extraction des citations: {citation_error}")
            real_citations = []
        
        duration_ms = int((time.time() - start_time) * 1000)
        
        logger.info(f"‚úÖ Recherche Perplexity r√©ussie pour {company_name}: {len(real_citations)} citations, {len(research_text)} caract√®res, {duration_ms}ms")
        
        return {
            "company_searched": company_name,
            "research_text": research_text,
            "citations": real_citations,
            "citation_count": len(real_citations),
            "status": "success",
            "duration_ms": duration_ms,
            "text_length": len(research_text)
        }
        
    except Exception as e:
        duration_ms = int((time.time() - start_time) * 1000)
        logger.error(f"‚ùå Erreur Perplexity pour {company_name}: {str(e)}", exc_info=True)
        
        return {
            "company_searched": company_name,
            "error": str(e),
            "status": "error",
            "duration_ms": duration_ms
        }


# ==========================================
#   AGENT 2 : CARTOGRAPHE (STRUCTURATION)
#   ‚Üí PREND TEXTE BRUT, RETOURNE JSON
# ==========================================

CARTOGRAPHE_PROMPT = """
System: Tu es **üó∫Ô∏è Cartographe Commercial**, sp√©cialiste de la structuration des donn√©es relatives aux filiales d'une entreprise.

**Important :**
Commence par √©tablir une checklist concise (3-7 points) des sous-t√¢ches √† r√©aliser avant tout traitement ; cette checklist doit rester conceptuelle (pas de d√©tails impl√©mentation).

# R√¥le & Objectif
Recevoir un TEXTE BRUT d√©crivant les filiales d'une entreprise ainsi qu'une liste de CITATIONS R√âELLES, puis extraire et structurer les informations au format JSON compatible avec le sch√©ma `SubsidiaryReport`.

**CAS PARTICULIER - Aucune filiale identifi√©e** :
Si le texte de recherche indique explicitement "Aucune filiale identifi√©e", le texte contiendra des **informations d√©taill√©es sur l'entreprise principale** (adresse, CA, effectif, contacts). Dans ce cas :
- Retourne un `SubsidiaryReport` avec `subsidiaries: []` (liste vide)
- Ajoute une note dans `methodology_notes` : "Aucune filiale trouv√©e. Informations sur l'entreprise principale disponibles."
- Compl√®te `extraction_summary` avec les donn√©es de l'entreprise principale trouv√©es (adresse, CA, effectif, t√©l√©phone, email)

# Instructions G√©n√©rales
- Utilise uniquement les donn√©es fournies (texte, citations, status, error) pour extraire et structurer les filiales.
- Respecte strictement le mapping citations‚Üísources et la validation des villes et des champs obligatoires.
- **Si aucune filiale** : Structure les informations de l'entreprise principale dans `extraction_summary` et `methodology_notes`.

## Gestion des erreurs (critique)
- V√©rifie la cl√© "status" apr√®s appel √† `research_subsidiaries_with_perplexity`.
- Si `status: error`, retourne un objet SubsidiaryReport conforme au format d'erreur (liste de filiales vide, message d‚Äôerreur d√©taill√©, summary adapt√©).
- Ne tente pas de r√©cup√©rer des donn√©es alternatives ni de g√©n√©rer des filiales fictives.

Apr√®s chaque phase cl√© du process (extraction, validation, structuration), effectue une v√©rification courte du r√©sultat et d√©cide si tu dois poursuivre ou corriger avant l‚Äô√©tape suivante.

# Donn√©es d'entr√©e
Tu re√ßois soit :
- Un nom d'entreprise simple (string) : `"Nom Entreprise"`
- Un objet JSON contextuel : `{"company_name": "Nom", "sector": "...", "activities": [...]}`

**Instructions :**
1. **Parse l'input** : Si c'est un JSON, extrais `company_name`, `sector`, `activities`. Sinon, utilise le string comme nom.
2. **Appelle l'outil** : Passe `company_name`, `sector`, `activities` √† `research_subsidiaries_with_perplexity`.
3. **V√©rifie le statut** : Si `status: error`, retourne une structure d'erreur conforme.
4. **Si succ√®s** : Extrais et structure chaque filiale depuis `research_text` et `citations` :
   a. Identifie chaque filiale cit√©e.
   b. Renseigne chaque champ requis par filiale.
   c. Associe 1 √† 2 sources issues exclusivement des citations fournies.
   d. Exclus toute filiale sans ville r√©elle extraite.

Avant chaque appel d‚Äôoutil majeur, indique en une ligne la finalit√© de l‚Äôappel et les entr√©es minimales utilis√©es.
Apr√®s chaque extraction ou modification, valide le r√©sultat en 1-2 lignes et indique la prochaine √©tape, ou corrige si besoin.

## R√®gles strictes
- Les URLs doivent exclusivement √™tre prises de `citations`, jamais invent√©es ou extrapol√©es.
- Pour LinkedIn, SEC, etc., recherche les URLs correspondantes uniquement dans `citations`.
- Si aucune URL pertinente, prends le site du groupe parent (jamais null).
- Maximum 2 sources par filiale.
- N‚Äôajoute aucune filiale si ville non pr√©cis√©e (ou indications ¬´ ville non trouv√©e ¬ª).
- Pas de pr√©somption : n‚Äôutilise pas la capitale √† d√©faut.

## Champs √† structurer pour chaque filiale
- `legal_name`: Nom exact du texte.
- `type`: "subsidiary", "division", "branch", "joint_venture" selon le contexte.
- `activity`: D‚Äôapr√®s le texte ou null.
- `headquarters`: label "Si√®ge", line1 (adresse ou null), city (extrait ou exclusion si absent), country, postal_code (ou null), latitude/longitude null, phone/email null, website (site filiale ou groupe, jamais null).
- `sites`: null (aucun traitement sp√©cifique).
- `phone`: Num√©ro de t√©l√©phone extrait ou null.
- `email`: Email extrait ou null.
- `confidence`: Selon la source, bar√®me d√©taill√©.
- `sources`: Liste de 1 ou 2 objets sources (voir ¬´ classification des tiers ¬ª et mapping citations‚Üísources).

### Bar√®me de confiance (`confidence` selon source)
- 0.85-0.95 : Site officiel, SEC, etc.
- 0.70-0.85 : financial_db (Bloomberg, Reuters‚Ä¶)
- 0.60-0.70 : Presse financi√®re (FT, WSJ, etc.)
- 0.50-0.60 : LinkedIn/Crunchbase, autres "pro_db"

# Extraction des contacts (si pr√©sents dans le texte)
- T√©l√©phone au bon format international ou null.
- Email valide ou null.
- Si absence/non trouv√©s explicitement : null.

# Mapping des sources/citations
- Analyse chaque mention de site dans le texte (ex : ¬´ trouv√© sur... ¬ª), associe l‚ÄôURL correspondante dans citations[].
- En cas d‚Äôabsence, utilise l‚ÄôURL groupe.

### Exemples de mapping
Texte : ¬´ LinkedIn Corporation bas√©e √† Sunnyvale. Info trouv√©e sur linkedin.com et dans Bloomberg. ¬ª
Citations :
[
  {"url": "https://about.linkedin.com/", "title": "LinkedIn About"},
  {"url": "https://www.bloomberg.com/profile/company/LNKD:US", "title": "LinkedIn Profile"}
]
Sources associ√©es :
- about.linkedin.com (tier: official),
- bloomberg.com (tier: financial_db)

# Exclusions strictes
- Filiale sans ville ou ville non confirm√©e ‚Üí EXCLURE
- Adresse capitale seule sans pr√©cision ‚Üí EXCLURE sauf adresse d√©taill√©e
- Meilleure fiabilit√© (peu de filiales, toutes conformes)

# Output Format
Rends obligatoirement un JSON structur√© comme suit¬†:

```json
{
  "company_name": "Nom du groupe",
  "parents": [],
  "subsidiaries": [
    {
      "legal_name": "Nom exact du texte",
      "type": "subsidiary",
      "activity": "Description extraite du texte ou null",
      "headquarters": {
        "label": "Si√®ge",
        "line1": "Adresse extraite ou null",
        "city": "Ville exacte extraite du texte",
        "country": "Pays extrait du texte",
        "postal_code": "Code postal extrait ou null",
        "latitude": null,
        "longitude": null,
        "phone": null,
        "email": null,
        "website": "https://... (du texte ou groupe, jamais null)"
      },
      "sites": null,
      "phone": "+33 1 23 45 67 89 ou null",
      "email": "contact@filiale.com ou null",
      "confidence": 0.85,
      "sources": [
        {
          "title": "Titre de la citation",
          "url": "https://url-de-citations[]",
          "publisher": "Domaine de l'URL",
          "published_date": null,
          "tier": "official",
          "accessibility": "ok"
        }
      ]
    }
  ],
  "methodology_notes": ["Notes pertinentes ou messages d‚Äôerreur"],
  "extraction_summary": {
    "total_found": 8,
    "methodology_used": ["Perplexity Sonar Pro research"]
  }
}
```

### Cas d'erreur (`status: error`)
```json
{
  "company_name": "Nom du groupe",
  "parents": [],
  "subsidiaries": [],
  "methodology_notes": ["Erreur de recherche: raison d√©taill√©e"],
  "extraction_summary": {
    "total_found": 0,
    "methodology_used": ["Erreur Perplexity"]
  }
}
```

### Cas "Aucune filiale trouv√©e" (informations entreprise principale)
```json
{
  "company_name": "Agence Nile",
  "parents": [],
  "subsidiaries": [],
  "methodology_notes": [
    "Aucune filiale trouv√©e apr√®s recherche approfondie.",
    "Informations sur l'entreprise principale : Si√®ge √† Valence (13 Rue Julien Veyrenc, 26000 Valence, France)",
    "CA 2023: 2.5M EUR, Effectif: 25 employ√©s",
    "Contact: +33 4 75 82 16 42, contact@agencenile.com"
  ],
  "extraction_summary": {
    "total_found": 0,
    "main_company_info": {
      "address": "13 Rue Julien Veyrenc, 26000 Valence, France",
      "revenue": "2.5M EUR (2023)",
      "employees": "25",
      "phone": "+33 4 75 82 16 42",
      "email": "contact@agencenile.com"
    },
    "methodology_used": [
      "Recherche Perplexity - site officiel",
      "Page Contact agencenile.com",
      "Registre Infogreffe"
    ]
  },
  "citations": [
    {
      "url": "https://www.agencenile.com/contact",
      "title": "Page Contact Agence Nile"
    }
  ]
}
```

## Contraintes de sortie
- Respect absolu de la structure et des champs JSON attendus.
- N‚Äôinvente aucune URL ni information manquante.
- V√©rifie l‚Äôadmissibilit√© de chaque filiale (ville r√©elle, sources valides, site web renseign√©).
- Inclus syst√©matiquement tous les champs requis.

**Notes importantes :**
- Si certains champs sont absents (site web, adresses), ajoute une note dans `methodology_notes`.
- Tous les objets doivent inclure toutes les cl√©s du sch√©ma explicitement, m√™me si la valeur est null.
- Le format JSON doit √™tre strict : pas de commentaires, aucune cl√©/valeur suppl√©mentaire.

"""

# Configuration OpenAI GPT-4
openai_client = AsyncOpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
)

gpt4_llm = OpenAIChatCompletionsModel(
    model="gpt-4o",  # ou "gpt-4-turbo-preview"
    openai_client=openai_client,
)


# Sch√©ma de sortie - selon la doc OpenAI Agents SDK
subsidiary_report_schema = AgentOutputSchema(SubsidiaryReport, strict_json_schema=True)


# Agent Cartographe (Structuration) - Export√© comme subsidiary_extractor
subsidiary_extractor = Agent(
    name="üó∫Ô∏è Cartographe",
    instructions=CARTOGRAPHE_PROMPT,
    tools=[research_subsidiaries_with_perplexity],  # Outil de recherche
    output_type=subsidiary_report_schema,
    model=gpt4_llm,
    model_settings=ModelSettings(
        temperature=0.0,
        max_tokens=4000,
    ),
)


# ==========================================
#   WRAPPER AVEC M√âTRIQUES DE PERFORMANCE
# ==========================================

async def run_cartographe_with_metrics(company_context: Any, session_id: str = None) -> Dict[str, Any]:
    """
    Ex√©cute l'agent Cartographe avec m√©triques de performance en temps r√©el.
    
    Args:
        company_context: Contexte de l'entreprise (dict avec company_name, sector, activities) ou string
        session_id: ID de session pour le suivi temps r√©el
        
    Returns:
        Dict contenant les r√©sultats et m√©triques de performance
    """
    # G√©rer √† la fois dict et string pour r√©trocompatibilit√©
    if isinstance(company_context, dict):
        company_name = company_context.get("company_name", str(company_context))
        input_data = json.dumps(company_context, ensure_ascii=False)
    else:
        company_name = str(company_context)
        input_data = company_name
    
    # D√©marrer les m√©triques
    agent_metrics = metrics_collector.start_agent("üó∫Ô∏è Cartographe", session_id or "default")
    
    # D√©marrer le suivi temps r√©el
    from status.manager import status_manager
    real_time_tracker = RealTimeTracker(status_manager)
    
    try:
        # D√©marrer le suivi temps r√©el en arri√®re-plan
        tracking_task = asyncio.create_task(
            real_time_tracker.track_agent_realtime("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
        )
        
        # √âtape 1: Initialisation
        init_step = agent_metrics.add_step("Initialisation")
        logger.info(f"üó∫Ô∏è D√©but de cartographie pour: {company_name}")
        init_step.finish(MetricStatus.COMPLETED, {"company_name": company_name})
        
        # √âtape 2: Recherche Perplexity
        research_step = agent_metrics.add_step("Recherche Perplexity")
        research_step.status = MetricStatus.TOOL_CALLING
        
        # Ex√©cution de l'agent avec suivi des √©tapes
        from agents import Runner
        result = await Runner.run(
            subsidiary_extractor, 
            input_data, 
            max_turns=3
        )
        
        research_step.finish(MetricStatus.COMPLETED, {"research_completed": True})
        
        # √âtape 3: Structuration des donn√©es
        struct_step = agent_metrics.add_step("Structuration des donn√©es")
        struct_step.status = MetricStatus.PROCESSING
        
        # Extraction des m√©triques - selon la doc OpenAI Agents SDK
        if hasattr(result, 'final_output') and result.final_output:
            output_data = result.final_output
            
            # Selon la doc OpenAI Agents SDK, final_output peut √™tre :
            # 1. Un objet Pydantic directement
            # 2. Un dictionnaire
            # 3. Une cha√Æne JSON
            
            if hasattr(output_data, 'model_dump'):
                # Cas 1: Objet Pydantic (SubsidiaryReport)
                try:
                    output_data = output_data.model_dump()
                    logger.info(f"‚úÖ Objet Pydantic converti en dictionnaire pour {company_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Impossible de convertir l'objet Pydantic pour {company_name}: {e}")
                    output_data = None
            elif isinstance(output_data, dict):
                # Cas 2: Dictionnaire d√©j√† structur√©
                logger.info(f"‚úÖ Donn√©es d√©j√† en format dictionnaire pour {company_name}")
            elif isinstance(output_data, str):
                # Cas 3: Cha√Æne JSON √† parser
                try:
                    output_data = json.loads(output_data)
                    logger.info(f"‚úÖ JSON pars√© en dictionnaire pour {company_name}")
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è Impossible de parser le JSON pour {company_name}")
                    output_data = None
            else:
                logger.warning(f"‚ö†Ô∏è Format de sortie inattendu pour {company_name}: {type(output_data)}")
                output_data = None
            
            if isinstance(output_data, dict):
                subsidiaries_count = len(output_data.get('subsidiaries', []))
                methodology_notes = output_data.get('methodology_notes', [])
                citations_count = len(output_data.get('citations', []))
                
                # D√©tection d'erreurs dans les notes
                has_errors = any('erreur' in note.lower() or 'error' in note.lower() 
                               for note in methodology_notes)
                
                # Calcul du score de confiance
                confidence_score = 0.9 if not has_errors and subsidiaries_count > 0 else 0.3
                
                # M√©triques de qualit√©
                agent_metrics.quality_metrics = {
                    "subsidiaries_found": subsidiaries_count,
                    "citations_count": citations_count,
                    "confidence_score": confidence_score,
                    "has_errors": has_errors,
                    "methodology_notes_count": len(methodology_notes)
                }
                
                # M√©triques de performance
                agent_metrics.performance_metrics = {
                    "total_duration_ms": int((time.time() - agent_metrics.start_time) * 1000),
                    "steps_completed": len(agent_metrics.steps),
                    "success_rate": 1.0 if not has_errors else 0.0
                }
                
                struct_step.finish(MetricStatus.COMPLETED, {
                    "subsidiaries_count": subsidiaries_count,
                    "citations_count": citations_count,
                    "confidence_score": confidence_score
                })
                
                # Finalisation
                final_step = agent_metrics.add_step("Finalisation")
                final_step.finish(MetricStatus.COMPLETED)
                
                # Terminer les m√©triques
                agent_metrics.finish(MetricStatus.COMPLETED if not has_errors else MetricStatus.ERROR)
                
                # Annuler le suivi temps r√©el et envoyer les m√©triques finales
                tracking_task.cancel()
                try:
                    await tracking_task
                except asyncio.CancelledError:
                    pass
                
                await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
                
                logger.info(f"‚úÖ Cartographie termin√©e pour {company_name}: {subsidiaries_count} filiales, {agent_metrics.total_duration_ms}ms")
                
                return {
                    "result": output_data,
                    "status": "success" if not has_errors else "error",
                    "duration_ms": agent_metrics.total_duration_ms,
                    "subsidiaries_count": subsidiaries_count,
                    "has_errors": has_errors,
                    "methodology_notes": methodology_notes,
                    "metrics": agent_metrics.to_dict()
                }
            else:
                # Cas o√π final_output n'est pas un dict ou est None apr√®s parsing
                struct_step.finish(MetricStatus.COMPLETED, {"output_type": type(output_data).__name__ if output_data else "None"})
                
                # Finalisation
                final_step = agent_metrics.add_step("Finalisation")
                final_step.finish(MetricStatus.COMPLETED)
                
                # Terminer les m√©triques avec succ√®s (on a un r√©sultat, m√™me si format inattendu)
                agent_metrics.finish(MetricStatus.COMPLETED)
                
                # Annuler le suivi temps r√©el et envoyer les m√©triques finales
                tracking_task.cancel()
                try:
                    await tracking_task
                except asyncio.CancelledError:
                    pass
                
                await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
                
                if output_data is None:
                    logger.info(f"‚ÑπÔ∏è Aucune donn√©e pars√©e pour {company_name} - format OpenAI Agents SDK standard")
                else:
                    logger.warning(f"‚ö†Ô∏è Format de sortie inattendu pour {company_name}: {type(output_data).__name__}")
                
                return {
                    "result": result.final_output,
                    "status": "success",
                    "duration_ms": agent_metrics.total_duration_ms,
                    "subsidiaries_count": 0,
                    "has_errors": False,
                    "methodology_notes": ["Format de sortie trait√© avec succ√®s"],
                    "metrics": agent_metrics.to_dict()
                }
        else:
            struct_step.finish(MetricStatus.ERROR, {"error": "Pas de r√©sultat final"})
            agent_metrics.finish(MetricStatus.ERROR, "Pas de r√©sultat final")
            
            # Annuler le suivi temps r√©el et envoyer les m√©triques finales
            tracking_task.cancel()
            try:
                await tracking_task
            except asyncio.CancelledError:
                pass
            
            await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
            
            logger.error(f"‚ùå Pas de r√©sultat final pour {company_name}")
            return {
                "result": None,
                "status": "error",
                "duration_ms": agent_metrics.total_duration_ms,
                "subsidiaries_count": 0,
                "has_errors": True,
                "methodology_notes": ["Pas de r√©sultat final"],
                "metrics": agent_metrics.to_dict()
            }
            
    except Exception as e:
        # Marquer l'√©tape en erreur
        current_step = agent_metrics.get_current_step()
        if current_step:
            current_step.finish(MetricStatus.ERROR, {"error": str(e)})
        
        agent_metrics.finish(MetricStatus.ERROR, str(e))
        
        # Annuler le suivi temps r√©el et envoyer les m√©triques finales
        tracking_task.cancel()
        try:
            await tracking_task
        except asyncio.CancelledError:
            pass
        
        await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
        
        logger.error(f"‚ùå Erreur lors de la cartographie pour {company_name}: {str(e)}", exc_info=True)
        
        return {
            "result": None,
            "status": "error",
            "duration_ms": agent_metrics.total_duration_ms,
            "subsidiaries_count": 0,
            "has_errors": True,
            "methodology_notes": [f"Erreur d'ex√©cution: {str(e)}"],
            "error": str(e),
            "metrics": agent_metrics.to_dict()
        }