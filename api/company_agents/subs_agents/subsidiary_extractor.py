"""
Architecture Multi-Agents CORRIG√âE pour extraction de filiales

DEUX PIPELINES DISPONIBLES :
1. Pipeline Simple : Recherche rapide et √©conomique
2. Pipeline Avanc√© : Recherche approfondie et exhaustive

Agent de recherche : Retourne TEXTE BRUT (pas de JSON)
Agent Cartographe : Structure le texte brut en JSON
"""

import os
import json
import re
import time
import logging
import asyncio
from typing import List, Optional, Dict, Any
from agents import Agent, AsyncOpenAI, OpenAIChatCompletionsModel, function_tool
from agents.model_settings import ModelSettings
from agents.agent_output import AgentOutputSchema
from company_agents.models import SubsidiaryReport
from company_agents.metrics import metrics_collector, MetricStatus, RealTimeTracker
from .perplexity_prompt_w_subs import PERPLEXITY_RESEARCH_SUBS_PROMPT
from .perplexity_prompt_wo_subs import PERPLEXITY_RESEARCH_WO_SUBS_PROMPT
from ..subs_tools.filiales_search_agent import subsidiary_search
# Configuration du logging
logger = logging.getLogger(__name__)


# ==========================================
#   AGENT 1 : PERPLEXITY (RECHERCHE)
#   ‚Üí RETOURNE DU TEXTE BRUT
# ==========================================

# Configuration Perplexity
perplexity_client = AsyncOpenAI(
    api_key=os.getenv("PERPLEXITY_API_KEY"),
    base_url="https://api.perplexity.ai",
)


# ==========================================
#   S√âLECTION DYNAMIQUE DU PROMPT PERPLEXITY
# ==========================================
#
# LOGIQUE DE S√âLECTION :
# 1. Le Mineur analyse l'entreprise et d√©termine has_filiales_only (true/false)
# 2. Le Cartographe passe has_filiales_only directement √† research_subsidiaries_with_perplexity
# 3. Perplexity effectue la recherche avec la strat√©gie optimis√©e (pas de re-analyse)
#
# **STRAT√âGIES DE RECHERCHE** :
# - **has_filiales_only=True** ‚Üí FILIALES_UNIQUEMENT (focus filiales juridiques uniquement)
# - **has_filiales_only=False** ‚Üí RECHERCHE_COMPLETE (filiales + pr√©sence commerciale: bureaux, R&D, distributeurs)
#
# **EXEMPLES** :
# - ACOEM Group (has_filiales_only=False) ‚Üí Recherche compl√®te (filiales + bureaux India/centres R&D)
# - Holding Pure (has_filiales_only=True) ‚Üí Filiales juridiques uniquement
# - PME locale (has_filiales_only=False) ‚Üí Recherche compl√®te (bureaux/distributeurs)
#
# Cette approche centralise l'analyse dans le Mineur et √©vite la duplication.

# ==========================================
#   FONCTION OUTIL : Recherche Perplexity
# ==========================================

@function_tool
async def research_subsidiaries_with_perplexity(
    company_name: str,
    sector: Optional[str] = None,
    activities: Optional[List[str]] = None,
    website: Optional[str] = None,
    context: Optional[str] = None,
    has_filiales_only: Optional[bool] = None,  # ‚Üê NOUVEAU : has_filiales_only direct du Mineur
    enterprise_type: Optional[str] = None  # ‚Üê NOUVEAU : enterprise_type direct du Mineur
) -> Dict:
    """
    Effectue une recherche Perplexity adapt√©e selon le type de pr√©sence internationale.

    Args:
        company_name: Nom de l'entreprise √† rechercher
        sector: Secteur d'activit√© principal (optionnel)
        activities: Liste des activit√©s (optionnel)
        website: Site web officiel (optionnel)
        context: Contexte enrichi du Mineur (optionnel)
        has_filiales_only: True si uniquement filiales juridiques, False si m√©lange ou bureaux uniquement (optionnel)
        enterprise_type: Type d'entreprise d√©termin√© par le Mineur (optionnel)
    
    Returns:
        dict avec:
          - research_text: Texte brut de recherche
          - citations: URLs sources trouv√©es
          - status: "success" ou "error"
          - duration_ms: Temps d'ex√©cution
          - error: Message d'erreur si applicable
    """
    start_time = time.time()
    logger.info(f"üîç Recherche Perplexity pour: {company_name}")
    
    try:
        # V√©rification de la cl√© API
        api_key = os.getenv("PERPLEXITY_API_KEY")
        if not api_key:
            logger.error("‚ùå PERPLEXITY_API_KEY non configur√©e")
            return {
                "company_searched": company_name,
                "error": "API key not configured",
                "status": "error",
                "duration_ms": 0
            }
    
        # üéØ UTILISATION DIRECTE de has_filiales_only du Mineur
        # Le Mineur a d√©j√† analys√© l'entreprise et d√©termin√© has_filiales_only
        # - True = entreprise avec UNIQUEMENT des filiales juridiques
        # - False = m√©lange (filiales + bureaux/distributeurs) OU bureaux uniquement
        use_filiales_only = has_filiales_only if has_filiales_only is not None else False

        # üéØ S√âLECTION DU PROMPT ADAPT√â
        if use_filiales_only:
            selected_prompt = PERPLEXITY_RESEARCH_SUBS_PROMPT
            logger.info(f"üéØ Strat√©gie: FILIALES_UNIQUEMENT pour {company_name} (has_filiales_only=True)")
        else:
            selected_prompt = PERPLEXITY_RESEARCH_WO_SUBS_PROMPT
            logger.info(f"üéØ Strat√©gie: RECHERCHE_COMPLETE pour {company_name} (has_filiales_only=False)")

        # Construction de la requ√™te optimis√©e
        query_parts = [f"Recherche les filiales de {company_name}"]
        
        # Ajouter le contexte m√©tier
        if sector:
            query_parts.append(f"Secteur : {sector}")
        if activities and len(activities) > 0:
            activities_str = ", ".join(activities[:3])
            query_parts.append(f"Activit√©s : {activities_str}")
        
        # Ajouter le contexte enrichi du Mineur
        if context:
            query_parts.append(f"Contexte : {context}")
        
        # Ajouter le site officiel
        if website:
            query_parts.append(f"Site officiel: {website}")
        
        query = ". ".join(query_parts) + "."

        # Appel Perplexity avec gestion d'erreurs
        logger.debug(f"üì° Appel API Perplexity pour: {company_name}")
        response = await perplexity_client.chat.completions.create(
            model="sonar-pro",
            messages=[
                {"role": "system", "content": selected_prompt},
                {"role": "user", "content": query}
            ],
            temperature=0.0,
            max_tokens=6000,  # Augment√© pour recherches approfondies
            extra_body={
                "search_context_size": "high",
                "return_citations": True,
                "return_related_questions": False,
            },
            timeout=120.0,  # 2 minutes max
        )
        
        # V√©rification de la r√©ponse
        if not response or not response.choices:
            logger.error(f"‚ùå R√©ponse vide de Perplexity pour: {company_name}")
            return {
                "company_searched": company_name,
                "error": "Empty response from Perplexity",
                "status": "error",
                "duration_ms": int((time.time() - start_time) * 1000)
            }
        
        # R√©cup√©rer le TEXTE BRUT (pas de JSON)
        research_text = response.choices[0].message.content
        
        if not research_text or len(research_text.strip()) < 50:
            logger.warning(f"‚ö†Ô∏è Texte de recherche trop court pour: {company_name}")
            return {
                "company_searched": company_name,
                "error": "Research text too short",
                "status": "error",
                "duration_ms": int((time.time() - start_time) * 1000)
            }
        
        # üîß GESTION D'ERREUR : Perplexity retourne du texte, pas du JSON
        logger.info(f"‚úÖ Perplexity a retourn√© du texte brut ({len(research_text)} caract√®res) pour: {company_name}")
        logger.debug(f"üìù D√©but du texte: {research_text[:200]}...")
        
        # Extraction des citations Perplexity
        real_citations = []
        
        try:
            # Citations dans response.citations
            if hasattr(response, 'citations') and response.citations:
                for citation in response.citations:
                    url = citation.url if hasattr(citation, 'url') else str(citation)
                    title = ''
                    if hasattr(citation, 'title'):
                        title_attr = getattr(citation, 'title')
                        title = title_attr() if callable(title_attr) else title_attr
                    
                    real_citations.append({
                        "url": url,
                        "title": title or '',
                        "snippet": getattr(citation, 'snippet', ''),
                    })
            
        except Exception as citation_error:
            logger.warning(f"‚ö†Ô∏è Erreur extraction citations: {citation_error}")
            real_citations = []
        
        duration_ms = int((time.time() - start_time) * 1000)
        
        logger.info(f"‚úÖ Recherche r√©ussie: {len(real_citations)} citations, {len(research_text)} chars, {duration_ms}ms")
        
        return {
            "company_searched": company_name,
            "research_text": research_text,
            "citations": real_citations,
            "citation_count": len(real_citations),
            "status": "success",
            "duration_ms": duration_ms,
            "text_length": len(research_text)
        }
        
    except Exception as e:
        duration_ms = int((time.time() - start_time) * 1000)
        logger.error(f"‚ùå Erreur Perplexity pour {company_name}: {str(e)}")
        
        return {
            "company_searched": company_name,
            "error": str(e),
            "status": "error",
            "duration_ms": duration_ms
        }


# ==========================================
#   AGENTS CARTOGRAPHES (STRUCTURATION)
#   ‚Üí PREND TEXTE BRUT, RETOURNE JSON
# ==========================================

# ==========================================
#   PROMPT POUR PIPELINE SIMPLE
# ==========================================

CARTOGRAPHE_SIMPLE_PROMPT = """
üó∫Ô∏è **Cartographe Commercial** : Structure les donn√©es de filiales en JSON `SubsidiaryReport`.

# WORKFLOW OBLIGATOIRE

## √âtape 1 : Appel de l'outil (CRITIQUE)
**PREMI√àRE ACTION** : Appelle `subsidiary_search` avec ces param√®tres :

```python
subsidiary_search(
    company_name="Nom exact de l'entreprise",  # OBLIGATOIRE
    sector="Secteur d'activit√©",               # ou None
    activities=["Activit√© 1", "Activit√© 2"],   # ou None
    website="https://example.com",             # ou None
    has_filiales_only=True                     # du Mineur (true si uniquement filiales, false si m√©lange/bureaux)
)
```

## √âtape 2 : Analyse du texte de recherche
Apr√®s l'appel, analyse le texte retourn√© par `subsidiary_search` qui est au format :
```
=== RECHERCHE FILIALES ET IMPLANTATIONS ===
FILIALES JURIDIQUES IDENTIFI√âES: [...]
BUREAUX ET CENTRES (PR√âSENCE COMMERCIALE): [...]
```

Continue √† l'√©tape 3 pour structurer ces donn√©es en JSON.

## √âtape 3 : Extraction des donn√©es (AVEC R√âFLEXION)

**üß† PHASE DE R√âFLEXION INTERNE** (avant structuration JSON) :
1. Lis `research_text` en entier
2. Identifie et classe en 3 cat√©gories :
   - **FILIALES JURIDIQUES** : entit√©s avec personnalit√© juridique propre (SARL, SAS, GmbH, LLC, etc.)
   - **BUREAUX COMMERCIAUX** : bureaux de vente, agences, succursales sans personnalit√© juridique
   - **PARTENAIRES/DISTRIBUTEURS** : entreprises tierces (partenaires, distributeurs autoris√©s, franchises)
3. Pour chaque entit√©, √©value :
   - Pays identifiable ? ‚Üí REQUIS (sinon EXCLURE)
   - Ville identifiable ? ‚Üí RECOMMAND√â (si absent, utiliser `city: null`)
   - Type de pr√©sence clair ? ‚Üí Si doute, classer en `commercial_presence` type="office"
   - Source tra√ßable dans `citations[]` ? ‚Üí Au moins 1 source requise
4. N'exclus que si **pays absent** OU **aucune source**
5. PUIS passe √† la structuration JSON

# R√àGLES CRITIQUES (NON-N√âGOCIABLES)

## üîç Distinction filiale vs pr√©sence commerciale

**FILIALE JURIDIQUE** (‚Üí `subsidiaries[]`) :
- Entit√© avec personnalit√© juridique propre
- Forme juridique explicite : SA, SAS, SARL, GmbH, LLC, Ltd, Inc, BV, etc.
- Exemple : "Acme France SAS", "Acme GmbH", "Acme Inc."

**BUREAU COMMERCIAL** (‚Üí `commercial_presence[]` type="office") :
- Bureau de vente, agence, succursale
- PAS de personnalit√© juridique propre
- Exemple : "Bureau commercial de Paris", "Acme - Agence Lyon"

**PARTENAIRE** (‚Üí `commercial_presence[]` type="partner") :
- Entreprise tierce avec accord de partenariat
- Exemple : "Partenaire certifi√© XYZ", "Alliance strat√©gique avec ABC"

**DISTRIBUTEUR** (‚Üí `commercial_presence[]` type="distributor") :
- Distributeur autoris√©, revendeur agr√©√©
- Exemple : "Distributeur exclusif pour l'Italie", "Authorized dealer"

**REPR√âSENTANT** (‚Üí `commercial_presence[]` type="representative") :
- Agent commercial, repr√©sentant
- Exemple : "Agent commercial pour l'Espagne"

## üö´ Anti-hallucination (R√àGLES ASSOUPLIES)
- **Copie exacte** : Ne JAMAIS inventer adresse, ville, t√©l√©phone, email
- **Localisation flexible** : 
  * **Pays obligatoire** : Sans pays identifiable = EXCLURE l'entit√©
  * **Ville recommand√©e** : Si absente mais pays pr√©sent = ACCEPTER avec `city: null`
- **Validation source** : Toute info doit √™tre trac√©e dans le texte
- **En cas de doute** : Utilise `null`, ne suppose rien
- **Classification par d√©faut** : Si nature juridique incertaine ‚Üí `commercial_presence` type="office", confidence: 0.5
- **Usines et centres R&D** : Toujours inclure en `commercial_presence` type="office" si mentionn√©s
- **Bureaux commerciaux** : Toujours inclure en `commercial_presence` type="office" si mentionn√©s

## üìã Extraction filiales juridiques (CRIT√àRES ASSOUPLIS)
Pour chaque filiale dans `research_text` :
- **Obligatoires** : `legal_name`, `country` (ville peut √™tre `null`)
- **Recommand√©s** : `city` (si absent, utiliser `null`)
- **Optionnels** : `line1` (adresse), `postal_code`, `phone`, `email`, `activity`
- **G√©ocodage automatique OBLIGATOIRE** :
  * Si `city` ET `country` pr√©sents ‚Üí ajouter `latitude` et `longitude` bas√©es sur tes connaissances g√©ographiques
  * Si SEULEMENT `country` pr√©sent (ville absente) ‚Üí ajouter `latitude` et `longitude` de la capitale du pays
  * Exemples : France sans ville ‚Üí Paris (48.8566, 2.3522), Germany sans ville ‚Üí Berlin (52.5200, 13.4050)
- **Sources** : URLs de `citations` uniquement
  - Tier : `official` (registres, sites officiels), `financial_media` (Bloomberg, Reuters), `other`
- **Confidence** :
  - 0.85-0.95 : Site officiel, SEC, registres
  - 0.70-0.85 : Financial DB (Bloomberg, Reuters)
  - 0.60-0.70 : Presse financi√®re (FT, WSJ)
  - 0.50-0.60 : LinkedIn, Crunchbase
- **Limites** : Max 50 filiales, max 10 sources/filiale, max 20 notes

## üåç Extraction pr√©sence commerciale (CRIT√àRES ASSOUPLIS)

Pour chaque bureau/partenaire/distributeur dans `research_text` :

**Obligatoires** :
- `name` : Nom du bureau/partenaire/distributeur
- `type` : "office", "partner", "distributor", "representative" (si doute ‚Üí "office")
- `relationship` : "owned" (bureau propre), "partnership", "authorized_distributor", "franchise" (si doute ‚Üí "owned")
- `location.country` : Pays obligatoire

**Recommand√©s** :
- `location.city` : Si absent, utiliser `null` (pays suffit)

**Optionnels** :
- `activity` : Activit√© sp√©cifique
- `location.line1` : Adresse compl√®te
- `location.postal_code`, `phone`, `email`
- `since_year` : Ann√©e d'√©tablissement
- `status` : "active", "inactive", "unverified"

## üåç G√©ocodage automatique OBLIGATOIRE (NOUVEAU)
**R√àGLES DE G√âOCODAGE** :
- **Si `city` ET `country` pr√©sents** ‚Üí Ajouter `latitude` et `longitude` du centre de la ville
- **Si SEULEMENT `country` pr√©sent (ville absente)** ‚Üí Ajouter `latitude` et `longitude` de la capitale du pays
- **Exemples avec ville** :
  * Paris, France ‚Üí latitude: 48.8566, longitude: 2.3522
  * London, UK ‚Üí latitude: 51.5074, longitude: -0.1278
  * New York, USA ‚Üí latitude: 40.7128, longitude: -74.0060
  * Berlin, Germany ‚Üí latitude: 52.5200, longitude: 13.4050
- **Exemples sans ville (pays seul)** :
  * France (ville inconnue) ‚Üí Paris: latitude: 48.8566, longitude: 2.3522
  * UK (ville inconnue) ‚Üí London: latitude: 51.5074, longitude: -0.1278
  * Germany (ville inconnue) ‚Üí Berlin: latitude: 52.5200, longitude: 13.4050
- **Pr√©cision** : Utilise les coordonn√©es du centre-ville principal ou de la capitale

**Sources** : URLs de `citations` uniquement
- Tier : `official` > `financial_media` > `other`

**Confidence** :
- 0.85-0.95 : Site officiel avec page "Nos bureaux/Partenaires"
- 0.70-0.85 : Presse sp√©cialis√©e, annonces officielles
- 0.60-0.70 : Bases de donn√©es professionnelles
- 0.50-0.60 : LinkedIn, mentions dans articles

**Limites** :
- Max 50 pr√©sences commerciales
- Max 10 sources/pr√©sence

## üéØ CLASSIFICATION PAR D√âFAUT (NOUVEAU - CRITICAL)

**En cas de doute sur la nature juridique** :
- **Par d√©faut** : Classer en `commercial_presence[]` avec `type="office"`
- **Confidence** : 0.5 (indique incertitude)
- **Exemples** :
  * "OneProd" sans forme juridique ‚Üí `commercial_presence`, type="office", confidence: 0.5
  * "JCTM Ltda" ‚Üí `subsidiaries` (Ltda = forme juridique), confidence: 0.9
  * "Acoem USA" ‚Üí `commercial_presence`, type="office", confidence: 0.6
  * "Benchmark Services" ‚Üí `commercial_presence`, type="office", confidence: 0.5

**Principe** : Mieux vaut **inclure** avec faible confidence que **exclure** totalement.

## üè¢ Si aucune filiale ET aucune pr√©sence commerciale
Extrais info entreprise principale dans `extraction_summary.main_company_info` :
- `address`, `revenue`, `employees`, `phone`, `email` (depuis `research_text`)
- Ajoute note : "Aucune filiale ni pr√©sence commerciale trouv√©e apr√®s analyse exhaustive"

## ‚ö†Ô∏è Gestion erreurs
Si `status: "error"` dans r√©ponse outil, retourne :
```json
{
  "company_name": "Nom",
  "parents": [],
  "subsidiaries": [],
  "commercial_presence": [],
  "methodology_notes": ["Erreur: message d√©taill√©"],
  "extraction_summary": {
    "total_found": 0,
    "total_commercial_presence": 0,
    "methodology_used": ["Erreur Perplexity"]
  }
}
```

## üéØ Validation g√©ographique
V√©rifie coh√©rence pays/ville AVANT inclusion :
- Paris (France) ‚â† Paris (Texas, USA)
- London (UK) ‚â† London (Ontario, Canada)
- Knoxville (Tennessee, USA) ‚â† Knoxfield (Victoria, Australia)

## üì§ Format sortie (succ√®s avec filiales + pr√©sence commerciale)

```json
{
  "company_name": "Nom du groupe",
  "parents": [],
  "subsidiaries": [
    {
      "legal_name": "Filiale SAS",
      "type": "subsidiary",
      "activity": "...",
      "headquarters": { "city": "Paris", "country": "France", ... },
      "sources": [...]
    }
  ],
  "commercial_presence": [
    {
      "name": "Bureau commercial de Lyon",
      "type": "office",
      "relationship": "owned",
      "activity": "Vente et support technique",
      "location": {
        "label": "Bureau commercial",
        "line1": "10 rue de la R√©publique",
        "city": "Lyon",
        "country": "France",
        "postal_code": "69002",
        "phone": "+33 4 XX XX XX XX",
        "email": "lyon@example.com",
        "website": "https://example.com/contact/lyon"
      },
      "confidence": 0.85,
      "sources": [
        {
          "title": "Nos bureaux - Example.com",
          "url": "https://example.com/contact/offices",
          "tier": "official",
          "accessibility": "ok"
        }
      ],
      "since_year": 2018,
      "status": "active"
    },
    {
      "name": "Distributeur autoris√© ABC GmbH",
      "type": "distributor",
      "relationship": "authorized_distributor",
      "activity": "Distribution exclusive pour l'Allemagne",
      "location": {
        "city": "Berlin",
        "country": "Allemagne",
        "website": "https://abc-distributor.de"
      },
      "confidence": 0.75,
      "sources": [
        {
          "title": "Nos distributeurs - Example.com",
          "url": "https://example.com/partners/distributors",
          "tier": "official"
        }
      ],
      "since_year": 2020,
      "status": "active"
    }
  ],
  "methodology_notes": [
    "3 filiales juridiques identifi√©es",
    "8 bureaux commerciaux r√©pertori√©s (France, Allemagne, Espagne)",
    "5 distributeurs autoris√©s en Europe"
  ],
  "extraction_summary": {
    "total_found": 3,
    "total_commercial_presence": 13,
    "presence_by_type": {
      "office": 8,
      "partner": 0,
      "distributor": 5,
      "representative": 0
    },
    "countries_covered": ["France", "Allemagne", "Espagne", "Italie", "Royaume-Uni"],
    "methodology_used": ["Perplexity Sonar Pro", "Site officiel", "Pages Contact/Bureaux"]
  }
}
```

## ‚úÖ Checklist finale (OBLIGATOIRE avant output)
- [ ] Phase de r√©flexion interne effectu√©e ?
- [ ] Outil appel√© avec 5 param√®tres corrects ?
- [ ] Status v√©rifi√© (success/error) ?
- [ ] **Distinction filiale juridique vs pr√©sence commerciale faite ?**
- [ ] **Si doute sur nature juridique ‚Üí Class√© en `commercial_presence` type="office" ?**
- [ ] Pays identifi√© pour chaque entit√© ? (ville peut √™tre `null`)
- [ ] **Coordonn√©es g√©ographiques ajout√©es** si `city` ET `country` pr√©sents ?
- [ ] Sources mapp√©es depuis `citations` uniquement ?
- [ ] Contacts copi√©s exactement (pas invent√©s) ?
- [ ] Tous champs pr√©sents dans JSON (null si manquant) ?
- [ ] **`commercial_presence[]` peupl√©e si bureaux/partenaires trouv√©s ?**
- [ ] Si texte long : trait√© par sections ?
- [ ] **Principe appliqu√© : Inclure avec faible confidence plut√¥t qu'exclure ?**
- [ ] **Usines et centres R&D inclus** m√™me avec informations partielles ?
- [ ] **Bureaux commerciaux inclus** m√™me avec informations partielles ?

## üè≠ INSTRUCTIONS SP√âCIALES POUR USINES ET CENTRES R&D
**ENTIT√âS √Ä TOUJOURS INCLURE :**
- **Usines** : manufacturing facilities, plants, production sites
- **Centres R&D** : research centers, R&D facilities, laboratories
- **Bureaux commerciaux** : offices, branches, commercial offices

**R√àGLES D'INCLUSION :**
- Si mentionn√© dans `research_text` avec pays identifiable ‚Üí INCLURE
- M√™me si informations partielles (ville manquante, contacts manquants)
- Classer en `commercial_presence` type="office"
- Utiliser `confidence` 0.4-0.6 pour informations partielles
- Utiliser `confidence` 0.7-0.9 pour informations compl√®tes

"""

# ==========================================
#   PROMPT POUR PIPELINE AVANC√â
# ==========================================

CARTOGRAPHE_ADVANCED_PROMPT = """
üó∫Ô∏è **Cartographe Commercial** : Structure les donn√©es de filiales en JSON `SubsidiaryReport`.

# WORKFLOW OBLIGATOIRE

## √âtape 1 : Appel de l'outil (CRITIQUE)
**PREMI√àRE ACTION** : Appelle `research_subsidiaries_with_perplexity` avec ces param√®tres :

```python
research_subsidiaries_with_perplexity(
    company_name="Nom exact de l'entreprise",  # OBLIGATOIRE
    sector="Secteur d'activit√©",               # ou None
    activities=["Activit√© 1", "Activit√© 2"],   # ou None
    website="https://example.com",             # ou None
    context="Contexte enrichi du Mineur",      # ou None
    has_filiales_only=True,                   # du Mineur (true si uniquement filiales, false si m√©lange/bureaux)
    enterprise_type="complex"                  # du Mineur (complex/simple)
)
```

## √âtape 2 : V√©rification du statut
Apr√®s l'appel, v√©rifie `status` dans la r√©ponse :
- Si `status: "success"` ‚Üí Continue √† l'√©tape 3
- Si `status: "error"` ‚Üí Retourne JSON d'erreur (voir format ci-dessous)

## √âtape 3 : Extraction des donn√©es (AVEC R√âFLEXION)

**üß† PHASE DE R√âFLEXION INTERNE** (avant structuration JSON) :
1. Lis `research_text` en entier
2. Identifie et classe en 3 cat√©gories :
   - **FILIALES JURIDIQUES** : entit√©s avec personnalit√© juridique propre (SARL, SAS, GmbH, LLC, etc.)
   - **BUREAUX COMMERCIAUX** : bureaux de vente, agences, succursales sans personnalit√© juridique
   - **PARTENAIRES/DISTRIBUTEURS** : entreprises tierces (partenaires, distributeurs autoris√©s, franchises)
3. Pour chaque entit√©, √©value :
   - Pays identifiable ? ‚Üí REQUIS (sinon EXCLURE)
   - Ville identifiable ? ‚Üí RECOMMAND√â (si absent, utiliser `city: null`)
   - Type de pr√©sence clair ? ‚Üí Si doute, classer en `commercial_presence` type="office"
   - Source tra√ßable dans `citations[]` ? ‚Üí Au moins 1 source requise
4. N'exclus que si **pays absent** OU **aucune source**
5. PUIS passe √† la structuration JSON

# R√àGLES CRITIQUES (NON-N√âGOCIABLES)

## üîç Distinction filiale vs pr√©sence commerciale

**FILIALE JURIDIQUE** (‚Üí `subsidiaries[]`) :
- Entit√© avec personnalit√© juridique propre
- Forme juridique explicite : SA, SAS, SARL, GmbH, LLC, Ltd, Inc, BV, etc.
- Exemple : "Acme France SAS", "Acme GmbH", "Acme Inc."

**BUREAU COMMERCIAL** (‚Üí `commercial_presence[]` type="office") :
- Bureau de vente, agence, succursale
- PAS de personnalit√© juridique propre
- Exemple : "Bureau commercial de Paris", "Acme - Agence Lyon"

**PARTENAIRE** (‚Üí `commercial_presence[]` type="partner") :
- Entreprise tierce avec accord de partenariat
- Exemple : "Partenaire certifi√© XYZ", "Alliance strat√©gique avec ABC"

**DISTRIBUTEUR** (‚Üí `commercial_presence[]` type="distributor") :
- Distributeur autoris√©, revendeur agr√©√©
- Exemple : "Distributeur exclusif pour l'Italie", "Authorized dealer"

**REPR√âSENTANT** (‚Üí `commercial_presence[]` type="representative") :
- Agent commercial, repr√©sentant
- Exemple : "Agent commercial pour l'Espagne"

## ‚úÖ ENTIT√âS √Ä INCLURE OBLIGATOIREMENT
**PRINCIPE FONDAMENTAL : Mieux vaut inclure avec faible confidence que exclure totalement**

**ENTIT√âS VALIDES √Ä TOUJOURS INCLURE :**
- **Filiales juridiques** : SAS, GmbH, Inc, Ltd, SARL, LLC, BV, etc.
- **Bureaux commerciaux** : offices, branches, agences, succursales
- **Distributeurs officiels** : partners, authorized dealers, revendeurs
- **Usines et centres de production** : manufacturing facilities, plants
- **Centres R&D et laboratoires** : research centers, R&D facilities
- **Repr√©sentants commerciaux** : agents, representatives

**R√àGLE D'INCLUSION ASSOUPLIE :**
- Si entit√© mentionn√©e dans `research_text` avec pays identifiable ‚Üí INCLURE
- M√™me si informations partielles (ville manquante, contacts manquants, etc.)
- Utiliser `confidence` faible (0.3-0.6) pour informations partielles
- Utiliser `confidence` √©lev√©e (0.7-0.9) pour informations compl√®tes

## üè¢ R√àGLE SP√âCIALE POUR SITE OFFICIEL
**ENTIT√âS MENTIONN√âES SUR SITE OFFICIEL :**
- Si entit√© mentionn√©e sur site officiel du groupe ‚Üí confidence: 0.5 (50%) MINIMUM
- M√™me si informations partielles (ville manquante, contacts manquants)
- Toujours inclure avec confidence 0.5-0.6
- Principe : Site officiel = source fiable, donc confidence minimum garantie

**EXEMPLES :**
- "ACOEM India Manufacturing Site" mentionn√© sur acoem.com ‚Üí confidence: 0.5
- "ACOEM R&D Center" mentionn√© sur acoem.com ‚Üí confidence: 0.5
- "Bureau commercial" mentionn√© sur site officiel ‚Üí confidence: 0.5

## üö´ Anti-hallucination (R√àGLES ASSOUPLIES)
- **Copie exacte** : Ne JAMAIS inventer adresse, ville, t√©l√©phone, email
- **Localisation flexible** :
  * **Pays obligatoire** : Sans pays identifiable = EXCLURE l'entit√©
  * **Ville recommand√©e** : Si absente mais pays pr√©sent = ACCEPTER avec `city: null`
- **Validation source** : Toute info doit √™tre trac√©e dans le texte
- **En cas de doute** : Utilise `null`, ne suppose rien
- **Classification par d√©faut** : Si nature juridique incertaine ‚Üí `commercial_presence` type="office", confidence: 0.5
- **Usines et centres R&D** : Toujours inclure en `commercial_presence` type="office" si mentionn√©s
- **Bureaux commerciaux** : Toujours inclure en `commercial_presence` type="office" si mentionn√©s

## üìã Extraction filiales juridiques (CRIT√àRES ASSOUPLIS)
Pour chaque filiale dans `research_text` :
- **Obligatoires** : `legal_name`, `country` (ville peut √™tre `null`)
- **Recommand√©s** : `city` (si absent, utiliser `null`)
- **Optionnels** : `line1` (adresse), `postal_code`, `phone`, `email`, `activity`
- **G√©ocodage automatique** : Si `city` ET `country` pr√©sents, ajouter `latitude` et `longitude` bas√©es sur tes connaissances g√©ographiques
- **Sources** : URLs de `citations` uniquement
  - Tier : `official` (registres, sites officiels), `financial_media` (Bloomberg, Reuters), `other`
- **Confidence** :
  - 0.85-0.95 : Site officiel, SEC, registres
  - 0.70-0.85 : Financial DB (Bloomberg, Reuters)
  - 0.60-0.70 : Presse financi√®re (FT, WSJ)
  - 0.50-0.60 : LinkedIn, Crunchbase
- **Limites** : Max 50 filiales, max 10 sources/filiale, max 20 notes

## üåç Extraction pr√©sence commerciale (CRIT√àRES ASSOUPLIS)

Pour chaque bureau/partenaire/distributeur dans `research_text` :

**Obligatoires** :
- `name` : Nom du bureau/partenaire/distributeur
- `type` : "office", "partner", "distributor", "representative" (si doute ‚Üí "office")
- `relationship` : "owned" (bureau propre), "partnership", "authorized_distributor", "franchise" (si doute ‚Üí "owned")
- `location.country` : Pays obligatoire

**Recommand√©s** :
- `location.city` : Si absent, utiliser `null` (pays suffit)

**Optionnels** :
- `activity` : Activit√© sp√©cifique
- `location.line1` : Adresse compl√®te
- `location.postal_code`, `phone`, `email`
- `since_year` : Ann√©e d'√©tablissement
- `status` : "active", "inactive", "unverified"

## üåç G√©ocodage automatique OBLIGATOIRE (NOUVEAU)
**R√àGLES DE G√âOCODAGE** :
- **Si `city` ET `country` pr√©sents** ‚Üí Ajouter `latitude` et `longitude` du centre de la ville
- **Si SEULEMENT `country` pr√©sent (ville absente)** ‚Üí Ajouter `latitude` et `longitude` de la capitale du pays
- **Exemples avec ville** :
  * Paris, France ‚Üí latitude: 48.8566, longitude: 2.3522
  * London, UK ‚Üí latitude: 51.5074, longitude: -0.1278
  * New York, USA ‚Üí latitude: 40.7128, longitude: -74.0060
  * Berlin, Germany ‚Üí latitude: 52.5200, longitude: 13.4050
- **Exemples sans ville (pays seul)** :
  * France (ville inconnue) ‚Üí Paris: latitude: 48.8566, longitude: 2.3522
  * UK (ville inconnue) ‚Üí London: latitude: 51.5074, longitude: -0.1278
  * Germany (ville inconnue) ‚Üí Berlin: latitude: 52.5200, longitude: 13.4050
- **Pr√©cision** : Utilise les coordonn√©es du centre-ville principal ou de la capitale

**Sources** : URLs de `citations` uniquement
- Tier : `official` > `financial_media` > `other`

**Confidence** :
- 0.85-0.95 : Site officiel avec page "Nos bureaux/Partenaires"
- 0.70-0.85 : Presse sp√©cialis√©e, annonces officielles
- 0.60-0.70 : Bases de donn√©es professionnelles
- 0.50-0.60 : LinkedIn, mentions dans articles

**Limites** :
- Max 50 pr√©sences commerciales
- Max 10 sources/pr√©sence

## üéØ CLASSIFICATION PAR D√âFAUT (NOUVEAU - CRITICAL)

**En cas de doute sur la nature juridique** :
- **Par d√©faut** : Classer en `commercial_presence[]` avec `type="office"`
- **Confidence** : 0.5 (indique incertitude)
- **Exemples** :
  * "OneProd" sans forme juridique ‚Üí `commercial_presence`, type="office", confidence: 0.5
  * "JCTM Ltda" ‚Üí `subsidiaries` (Ltda = forme juridique), confidence: 0.9
  * "Acoem USA" ‚Üí `commercial_presence`, type="office", confidence: 0.6
  * "Benchmark Services" ‚Üí `commercial_presence`, type="office", confidence: 0.5

**Principe** : Mieux vaut **inclure** avec faible confidence que **exclure** totalement.

## üè¢ Si aucune filiale ET aucune pr√©sence commerciale
Extrais info entreprise principale dans `extraction_summary.main_company_info` :
- `address`, `revenue`, `employees`, `phone`, `email` (depuis `research_text`)
- Ajoute note : "Aucune filiale ni pr√©sence commerciale trouv√©e apr√®s analyse exhaustive"

## ‚ö†Ô∏è Gestion erreurs
Si `status: "error"` dans r√©ponse outil, retourne :
```json
{
  "company_name": "Nom",
  "parents": [],
  "subsidiaries": [],
  "commercial_presence": [],
  "methodology_notes": ["Erreur: message d√©taill√©"],
  "extraction_summary": {
    "total_found": 0,
    "total_commercial_presence": 0,
    "methodology_used": ["Erreur Perplexity"]
  }
}
```

## üéØ Validation g√©ographique
V√©rifie coh√©rence pays/ville AVANT inclusion :
- Paris (France) ‚â† Paris (Texas, USA)
- London (UK) ‚â† London (Ontario, Canada)
- Knoxville (Tennessee, USA) ‚â† Knoxfield (Victoria, Australia)

## ‚úÖ Checklist finale (OBLIGATOIRE avant output)
- [ ] Phase de r√©flexion interne effectu√©e ?
- [ ] Outil appel√© avec param√®tres corrects ?
- [ ] Status v√©rifi√© (success/error) ?
- [ ] **Distinction filiale juridique vs pr√©sence commerciale faite ?**
- [ ] **Si doute sur nature juridique ‚Üí Class√© en `commercial_presence` type="office" ?**
- [ ] Pays identifi√© pour chaque entit√© ? (ville peut √™tre `null`)
- [ ] **Coordonn√©es g√©ographiques ajout√©es** si `city` ET `country` pr√©sents ?
- [ ] Sources mapp√©es depuis `citations` uniquement ?
- [ ] Contacts copi√©s exactement (pas invent√©s) ?
- [ ] Tous champs pr√©sents dans JSON (null si manquant) ?
- [ ] **`commercial_presence[]` peupl√©e si bureaux/partenaires trouv√©s ?**
- [ ] Si texte long : trait√© par sections ?
- [ ] **Principe appliqu√© : Inclure avec faible confidence plut√¥t qu'exclure ?**
- [ ] **Usines et centres R&D inclus** m√™me avec informations partielles ?
- [ ] **Bureaux commerciaux inclus** m√™me avec informations partielles ?

## üè≠ INSTRUCTIONS SP√âCIALES POUR USINES ET CENTRES R&D
**ENTIT√âS √Ä TOUJOURS INCLURE :**
- **Usines** : manufacturing facilities, plants, production sites
- **Centres R&D** : research centers, R&D facilities, laboratories
- **Bureaux commerciaux** : offices, branches, commercial offices

**R√àGLES D'INCLUSION :**
- Si mentionn√© dans `research_text` avec pays identifiable ‚Üí INCLURE
- M√™me si informations partielles (ville manquante, contacts manquants)
- Classer en `commercial_presence` type="office"
- Utiliser `confidence` 0.4-0.6 pour informations partielles
- Utiliser `confidence` 0.7-0.9 pour informations compl√®tes

"""

# Configuration OpenAI GPT-4
openai_client = AsyncOpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
)

gpt4_llm = OpenAIChatCompletionsModel(
    model="gpt-4o",
    openai_client=openai_client,
)


# Sch√©ma de sortie - selon la doc OpenAI Agents SDK
subsidiary_report_schema = AgentOutputSchema(SubsidiaryReport, strict_json_schema=True)


# ==========================================
#   AGENT CARTOGRAPHE SIMPLE
# ==========================================

cartographe_simple = Agent(
    name="üó∫Ô∏è Cartographe",
    instructions=CARTOGRAPHE_SIMPLE_PROMPT,
    tools=[subsidiary_search],  # Outil de recherche simple
    output_type=subsidiary_report_schema,
    model=gpt4_llm,
)


# ==========================================
#   AGENT CARTOGRAPHE AVANC√â
# ==========================================

cartographe_advanced = Agent(
    name="üó∫Ô∏è Cartographe",
    instructions=CARTOGRAPHE_ADVANCED_PROMPT,
    tools=[research_subsidiaries_with_perplexity],  # Outil de recherche avanc√©
    output_type=subsidiary_report_schema,
    model=gpt4_llm,
)


# Exportation pour r√©trocompatibilit√©
subsidiary_extractor = cartographe_advanced  # Par d√©faut, utilise le pipeline avanc√©


# ==========================================
#   WRAPPER AVEC M√âTRIQUES DE PERFORMANCE
# ==========================================

async def run_cartographe_with_metrics(
    company_context: Any,
    session_id: str = None,
    deep_search: bool = False
) -> Dict[str, Any]:
    """
    Ex√©cute l'agent Cartographe avec m√©triques de performance en temps r√©el.

    Args:
        company_context: Contexte de l'entreprise (dict avec company_name, sector, activities) ou string
        session_id: ID de session pour le suivi temps r√©el
        deep_search: Si True, utilise le pipeline avanc√© (Perplexity). Si False, utilise le pipeline simple (gpt-4o-search)

    Returns:
        Dict contenant les r√©sultats et m√©triques de performance
    """
    # S√©lectionner l'agent selon deep_search
    selected_agent = cartographe_advanced if deep_search else cartographe_simple
    pipeline_name = "Pipeline Avanc√©" if deep_search else "Pipeline Simple"

    logger.info(f"üéØ S√©lection pipeline: {pipeline_name}")

    # G√©rer √† la fois dict et string pour r√©trocompatibilit√©
    if isinstance(company_context, dict):
        company_name = company_context.get("company_name", str(company_context))
        input_data = json.dumps(company_context, ensure_ascii=False)
    else:
        company_name = str(company_context)
        input_data = company_name

    # D√©marrer les m√©triques
    agent_name = "üó∫Ô∏è Cartographe"
    agent_metrics = metrics_collector.start_agent(agent_name, session_id or "default")
    
    # D√©marrer le suivi temps r√©el
    from status.manager import status_manager
    real_time_tracker = RealTimeTracker(status_manager)
    
    try:
        # D√©marrer le suivi temps r√©el en arri√®re-plan
        tracking_task = asyncio.create_task(
            real_time_tracker.track_agent_realtime("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
        )
        
        # √âtape 1: Initialisation
        init_step = agent_metrics.add_step("Initialisation")
        logger.info(f"üó∫Ô∏è D√©but de cartographie pour: {company_name} ({pipeline_name})")
        init_step.finish(MetricStatus.COMPLETED, {
            "company_name": company_name,
            "pipeline": pipeline_name,
            "deep_search": deep_search
        })

        # √âtape 2: Recherche (nom adapt√© selon le pipeline)
        research_name = "Recherche approfondie" if deep_search else "Recherche rapide"
        research_step = agent_metrics.add_step(research_name)
        research_step.status = MetricStatus.TOOL_CALLING

        # Ex√©cution de l'agent avec suivi des √©tapes
        from agents import Runner
        result = await Runner.run(
            selected_agent,  # ‚Üê Utiliser l'agent s√©lectionn√© selon deep_search
            input_data,
            max_turns=3
        )

        research_step.finish(MetricStatus.COMPLETED, {
            "research_completed": True,
            "pipeline_used": pipeline_name
        })
        
        # √âtape 3: Structuration des donn√©es
        struct_step = agent_metrics.add_step("Structuration des donn√©es")
        struct_step.status = MetricStatus.PROCESSING
        
        # Extraction des m√©triques - selon la doc OpenAI Agents SDK
        if hasattr(result, 'final_output') and result.final_output:
            output_data = result.final_output
            
            # Selon la doc OpenAI Agents SDK, final_output peut √™tre :
            # 1. Un objet Pydantic directement
            # 2. Un dictionnaire
            # 3. Une cha√Æne JSON
            
            if hasattr(output_data, 'model_dump'):
                # Cas 1: Objet Pydantic (SubsidiaryReport)
                try:
                    output_data = output_data.model_dump()
                    logger.info(f"‚úÖ Objet Pydantic converti en dictionnaire pour {company_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Impossible de convertir l'objet Pydantic pour {company_name}: {e}")
                    output_data = None
            elif isinstance(output_data, dict):
                # Cas 2: Dictionnaire d√©j√† structur√©
                logger.info(f"‚úÖ Donn√©es d√©j√† en format dictionnaire pour {company_name}")
                
                # Validation de taille pour √©viter les JSON trop volumineux
                json_str = json.dumps(output_data, ensure_ascii=False)
                if len(json_str) > 10000:  # Limite √† 10KB
                    logger.warning(f"‚ö†Ô∏è JSON trop volumineux ({len(json_str)} caract√®res) pour {company_name}, limitation appliqu√©e")
                    # Limiter le nombre de filiales
                    if 'subsidiaries' in output_data and len(output_data['subsidiaries']) > 10:
                        output_data['subsidiaries'] = output_data['subsidiaries'][:10]
                        output_data['methodology_notes'] = (output_data.get('methodology_notes', []) or [])[:5]
                        logger.info(f"‚úÖ Limitation appliqu√©e: 10 filiales max pour {company_name}")
            elif isinstance(output_data, str):
                # Cas 3: Cha√Æne JSON √† parser
                try:
                    output_data = json.loads(output_data)
                    logger.info(f"‚úÖ JSON pars√© en dictionnaire pour {company_name}")
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå Erreur JSON pour {company_name}: {e}")
                    logger.error(f"üìù Contenu re√ßu: {output_data[:500]}...")
                    # üîß FALLBACK : Cr√©er un objet vide en cas d'√©chec JSON
                    output_data = {
                        "company_name": company_name,
                        "subsidiaries": [],
                        "commercial_presence": [],
                        "methodology_notes": [f"Erreur de parsing JSON: {str(e)}"]
                    }
                    logger.warning(f"‚ö†Ô∏è Fallback appliqu√© pour {company_name}")
            else:
                logger.warning(f"‚ö†Ô∏è Format de sortie inattendu pour {company_name}: {type(output_data)}")
                output_data = None
            
            if isinstance(output_data, dict):
                subsidiaries_count = len(output_data.get('subsidiaries', []))
                commercial_presence_count = len(output_data.get('commercial_presence', []))
                methodology_notes = output_data.get('methodology_notes', [])
                
                # üîß FIX: Mapper les citations depuis les sources des entit√©s
                all_sources = []
                for sub in output_data.get('subsidiaries', []):
                    all_sources.extend(sub.get('sources', []))
                for pres in output_data.get('commercial_presence', []):
                    all_sources.extend(pres.get('sources', []))
                
                # Compter les URLs uniques
                unique_urls = set([s.get('url') for s in all_sources if s.get('url')])
                citations_count = len(unique_urls)
                
                logger.info(f"üìä Cartographie {company_name}: {subsidiaries_count} filiales, {commercial_presence_count} pr√©sences commerciales, {citations_count} sources uniques")
                
                # D√©tection d'erreurs dans les notes
                has_errors = any('erreur' in note.lower() or 'error' in note.lower() 
                               for note in (methodology_notes or []))
                
                # Calcul du score de confiance am√©lior√©
                total_entities = subsidiaries_count + commercial_presence_count
                if total_entities > 0 and not has_errors:
                    confidence_score = 0.9
                elif total_entities > 0 and has_errors:
                    confidence_score = 0.6
                else:
                    confidence_score = 0.3
                
                # M√©triques de qualit√© enrichies
                agent_metrics.quality_metrics = {
                    "subsidiaries_found": subsidiaries_count,
                    "commercial_presence_found": commercial_presence_count,
                    "total_entities": total_entities,
                    "citations_count": citations_count,
                    "confidence_score": confidence_score,
                    "has_errors": has_errors,
                    "methodology_notes_count": len(methodology_notes) if methodology_notes else 0
                }
                
                # M√©triques de performance
                agent_metrics.performance_metrics = {
                    "total_duration_ms": int((time.time() - agent_metrics.start_time) * 1000),
                    "steps_completed": len(agent_metrics.steps),
                    "success_rate": 1.0 if not has_errors else 0.0
                }
                
                struct_step.finish(MetricStatus.COMPLETED, {
                    "subsidiaries_count": subsidiaries_count,
                    "citations_count": citations_count,
                    "confidence_score": confidence_score
                })
                
                # Finalisation
                final_step = agent_metrics.add_step("Finalisation")
                final_step.finish(MetricStatus.COMPLETED)
                
                # Terminer les m√©triques
                agent_metrics.finish(MetricStatus.COMPLETED if not has_errors else MetricStatus.ERROR)
                
                # Annuler le suivi temps r√©el et envoyer les m√©triques finales
                tracking_task.cancel()
                try:
                    await tracking_task
                except asyncio.CancelledError:
                    pass
                
                await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
                
                logger.info(f"‚úÖ Cartographie termin√©e pour {company_name}: {subsidiaries_count} filiales, {agent_metrics.total_duration_ms}ms")
                
                return {
                    "result": output_data,
                    "status": "success" if not has_errors else "error",
                    "duration_ms": agent_metrics.total_duration_ms,
                    "subsidiaries_count": subsidiaries_count,
                    "has_errors": has_errors,
                    "methodology_notes": methodology_notes or [],
                    "metrics": agent_metrics.to_dict()
                }
            else:
                # Cas o√π final_output n'est pas un dict ou est None apr√®s parsing
                struct_step.finish(MetricStatus.COMPLETED, {"output_type": type(output_data).__name__ if output_data else "None"})
                
                # Finalisation
                final_step = agent_metrics.add_step("Finalisation")
                final_step.finish(MetricStatus.COMPLETED)
                
                # Terminer les m√©triques avec succ√®s (on a un r√©sultat, m√™me si format inattendu)
                agent_metrics.finish(MetricStatus.COMPLETED)
                
                # Annuler le suivi temps r√©el et envoyer les m√©triques finales
                tracking_task.cancel()
                try:
                    await tracking_task
                except asyncio.CancelledError:
                    pass
                
                await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
                
                if output_data is None:
                    logger.info(f"‚ÑπÔ∏è Aucune donn√©e pars√©e pour {company_name} - format OpenAI Agents SDK standard")
                else:
                    logger.warning(f"‚ö†Ô∏è Format de sortie inattendu pour {company_name}: {type(output_data).__name__}")
                
                return {
                    "result": result.final_output,
                    "status": "success",
                    "duration_ms": agent_metrics.total_duration_ms,
                    "subsidiaries_count": 0,
                    "has_errors": False,
                    "methodology_notes": ["Format de sortie trait√© avec succ√®s"],
                    "metrics": agent_metrics.to_dict()
                }
        else:
            struct_step.finish(MetricStatus.ERROR, {"error": "Pas de r√©sultat final"})
            agent_metrics.finish(MetricStatus.ERROR, "Pas de r√©sultat final")
            
            # Annuler le suivi temps r√©el et envoyer les m√©triques finales
            tracking_task.cancel()
            try:
                await tracking_task
            except asyncio.CancelledError:
                pass
            
            await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
            
            logger.error(f"‚ùå Pas de r√©sultat final pour {company_name}")
            return {
                "result": None,
                "status": "error",
                "duration_ms": agent_metrics.total_duration_ms,
                "subsidiaries_count": 0,
                "has_errors": True,
                "methodology_notes": ["Pas de r√©sultat final"],
                "metrics": agent_metrics.to_dict()
            }
            
    except Exception as e:
        # Marquer l'√©tape en erreur
        current_step = agent_metrics.get_current_step()
        if current_step:
            current_step.finish(MetricStatus.ERROR, {"error": str(e)})
        
        agent_metrics.finish(MetricStatus.ERROR, str(e))
        
        # Annuler le suivi temps r√©el et envoyer les m√©triques finales
        tracking_task.cancel()
        try:
            await tracking_task
        except asyncio.CancelledError:
            pass
        
        await real_time_tracker.send_final_metrics("üó∫Ô∏è Cartographe", session_id or "default", agent_metrics)
        
        logger.error(f"‚ùå Erreur lors de la cartographie pour {company_name}: {str(e)}", exc_info=True)
        
        return {
            "result": None,
            "status": "error",
            "duration_ms": agent_metrics.total_duration_ms,
            "subsidiaries_count": 0,
            "has_errors": True,
            "methodology_notes": [f"Erreur d'ex√©cution: {str(e)}"],
            "error": str(e),
            "metrics": agent_metrics.to_dict()
        }