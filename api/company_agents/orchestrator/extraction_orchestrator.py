"""
Main orchestration logic for company information extraction.

This module contains the core orchestration logic that coordinates
the execution of all agents in the extraction pipeline.
"""

import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass, field
from datetime import datetime, timezone
from pydantic import ValidationError

from ..models import CompanyInfo
from ..processors.data_processor import ExtractionState
from .agent_caller import (
    call_company_analyzer,
    call_information_extractor,
    call_subsidiary_extractor,
    call_meta_validator,
    call_data_restructurer,
)

logger = logging.getLogger(__name__)


@dataclass
class ExtractionState:
    """√âtat d'extraction pour l'orchestrateur."""
    session_id: str
    raw_input: str
    include_subsidiaries: bool = True
    deep_search: bool = False
    target_entity: Optional[str] = None
    info_card: Optional[Dict[str, Any]] = None
    info_raw: Optional[Dict[str, Any]] = None
    subs_report: Optional[Dict[str, Any]] = None
    subs_raw: Optional[Dict[str, Any]] = None
    analyzer_raw: Optional[Dict[str, Any]] = None
    meta_report: Optional[Dict[str, Any]] = None
    warnings: list = field(default_factory=list)

    def log(self, step: str, payload: Any) -> None:
        """Log une √©tape de l'extraction."""
        logger.debug("[state:%s] %s ‚Üí %s", self.session_id, step, payload)


def _resolve_target_entity(raw_input: str, analyzer_data: Dict[str, Any]) -> str:
    """
    R√©sout l'entit√© cible √† partir des donn√©es d'analyse.
    
    Logique de s√©lection :
    1. Si l'entreprise est une filiale (relationship="subsidiary") ET qu'une parent_company est identifi√©e
       ‚Üí Utiliser la parent_company comme target_entity
    2. Sinon, utiliser l'entit√© l√©gale identifi√©e par l'√âclaireur
    3. Fallback sur l'entr√©e brute si aucune donn√©e d'analyse
    
    Args:
        raw_input: Entr√©e brute de l'utilisateur
        analyzer_data: Donn√©es de l'analyseur d'entreprise
        
    Returns:
        Nom de l'entit√© cible r√©solue
    """
    if not analyzer_data:
        return raw_input
    
    # V√©rifier si c'est une filiale avec une soci√©t√© m√®re identifi√©e
    relationship = analyzer_data.get("relationship")
    parent_company = analyzer_data.get("parent_company")
    
    if relationship == "subsidiary" and parent_company:
        logger.info(
            "üéØ Entit√© filiale d√©tect√©e: %s ‚Üí Cible chang√©e vers soci√©t√© m√®re: %s",
            analyzer_data.get("entity_legal_name", raw_input),
            parent_company
        )
        return parent_company
    
    # Priorit√© aux donn√©es d'analyse (entit√© l√©gale)
    entity_name = analyzer_data.get("entity_legal_name")
    if entity_name:
        logger.info("üéØ Entit√© cible r√©solue: %s", entity_name)
        return entity_name
    
    # Fallback sur l'entr√©e brute
    logger.info("üéØ Fallback sur entr√©e brute: %s", raw_input)
    return raw_input


def _should_run_meta_validation(state: ExtractionState) -> bool:
    """
    D√©termine si la validation m√©ta doit √™tre ex√©cut√©e.
    
    Args:
        state: √âtat d'extraction
        
    Returns:
        True si la validation m√©ta doit √™tre ex√©cut√©e
    """
    # Ex√©cuter la validation m√©ta si on a un rapport de filiales (m√™me vide)
    if not state.subs_report:
        return False
    
    # Si c'est une cha√Æne, la parser
    if isinstance(state.subs_report, str):
        try:
            import json
            state.subs_report = json.loads(state.subs_report)
        except (json.JSONDecodeError, TypeError):
            return False
    
    # V√©rifier si on a un rapport de filiales valide (m√™me avec liste vide)
    # Le Superviseur doit valider la coh√©rence m√™me quand il n'y a pas de filiales
    return isinstance(state.subs_report, dict) and "subsidiaries" in state.subs_report


async def orchestrate_extraction(
    raw_input: str,
    *,
    session_id: str,
    include_subsidiaries: bool = True,
    deep_search: bool = False,
) -> Dict[str, Any]:
    """
    Orchestrateur principal du pipeline d'extraction multi-agents.

    S√©quence d'ex√©cution :
    1. üîç Company Analyzer : Identification de l'entit√© l√©gale
    2. ‚õèÔ∏è Information Extractor : Consolidation des informations cl√©s
    3. üó∫Ô∏è Subsidiary Extractor : Extraction des filiales (si demand√©)
    4. ‚öñÔ∏è Meta Validator : Validation de coh√©rence (si n√©cessaire)
    5. üîÑ Data Restructurer : Normalisation finale

    Args:
        raw_input: Entr√©e brute de l'utilisateur
        session_id: ID de session unique
        include_subsidiaries: Inclure l'extraction des filiales
        deep_search: Mode de recherche approfondie (Perplexity) vs simple (GPT-4o-search)

    Returns:
        Donn√©es d'entreprise extraites et valid√©es
    """
    logger.info("üöÄ D√©marrage de l'orchestration d'extraction pour session=%s (deep_search=%s)", session_id, deep_search)

    state = ExtractionState(
        session_id=session_id,
        raw_input=raw_input,
        include_subsidiaries=include_subsidiaries,
        deep_search=deep_search,
    )

    try:
        # √âtape 1: Identification de l'entit√© l√©gale
        logger.info("üîç √âtape 1: Identification de l'entit√© l√©gale")
        analyzer_data = await call_company_analyzer(state)
        state.target_entity = _resolve_target_entity(raw_input, analyzer_data)
        state.log("analyzer", analyzer_data)

        # √âtape 2: Consolidation des informations cl√©s
        logger.info("‚õèÔ∏è √âtape 2: Consolidation des informations cl√©s")
        info_data = await call_information_extractor(state)
        state.log("information_extractor", info_data)

        # √âtape 3: Extraction des filiales (conditionnelle)
        if state.include_subsidiaries:
            logger.info("üó∫Ô∏è √âtape 3: Extraction des filiales")
            await call_subsidiary_extractor(state)
            state.log("subsidiary_extractor", state.subs_report)

        # √âtape 4: Validation de coh√©rence (conditionnelle)
        if _should_run_meta_validation(state):
            logger.info("‚öñÔ∏è √âtape 4: Validation de coh√©rence")
            await call_meta_validator(state)
            state.log("meta_validator", state.meta_report)

        # √âtape 5: Restructuration des donn√©es pour garantir la qualit√©
        logger.info("üîÑ √âtape 5: Restructuration des donn√©es")
        restructured_company_info = await call_data_restructurer(state)

        if restructured_company_info:
            # Utiliser les donn√©es restructur√©es directement
            try:
                validated_model = CompanyInfo.model_validate(
                    restructured_company_info
                )

                # Enrichir les m√©tadonn√©es avant de retourner
                from ..models import ExtractionMetadata
                
                metadata_dict = (
                    validated_model.extraction_metadata.model_dump()
                    if validated_model.extraction_metadata
                    else {}
                )
                metadata_dict.setdefault("session_id", session_id)
                
                # Cr√©er un objet ExtractionMetadata valide
                validated_model.extraction_metadata = ExtractionMetadata(**metadata_dict)

                if not validated_model.extraction_date:
                    validated_model.extraction_date = datetime.now(timezone.utc).isoformat()

                logger.info("‚úÖ Extraction termin√©e avec succ√®s pour session=%s", session_id)
                return validated_model.model_dump()
            except ValidationError as exc:
                logger.error(
                    "‚ùå Erreur de validation CompanyInfo pour session=%s: %s",
                    session_id,
                    exc,
                )
                # Fallback sur les donn√©es brutes
                return restructured_company_info
        else:
            logger.warning("‚ö†Ô∏è Aucune donn√©e restructur√©e disponible pour session=%s", session_id)
            return {}

    except Exception as exc:
        logger.error(
            "‚ùå Erreur lors de l'orchestration pour session=%s: %s",
            session_id,
            exc,
            exc_info=True,
        )
        # Retourner un r√©sultat d'erreur structur√©
        return {
            "error": "Extraction failed",
            "message": str(exc),
            "session_id": session_id,
            "raw_input": raw_input,
        }
